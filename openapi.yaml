openapi: 3.0.0
info:
  title: Finerio Connect API
  contact:
    name: Email
    email: hola@finerioconnect.com
  x-logo:
    url: finerio_dark_horizontal_color.svg
  description: "
  
    # Introduction
  
    Welcome to the Finerio Connect API! We hope you enjoy the journey to connect
    your application to our systems. With the Finerio Connect API, you can fetch
    bank information from your users, such as accounts, transactions, balances,
    and more.


    First, you need to acquire your login access.  We use OAuth2 with the
    'password' type. Please contact us in order to obtain your login access.


    In Finerio we utilize four standard fields to obtain an access token:

    - Client ID

    - Client secret

    - Username

    - Password


    Once you get access to the API (an access token), you can start using the
    API HTTP endpoints. A normal flow consists of:

    - Register your callbacks (optional, but strongly recommended).

    - Create a customer.

    - Create a credential.

    - Wait to receive data in your callbacks.

    - Process the information received in your callbacks.

    - Get the accounts of a credential.

    - Get the transactions of an account.


    Are you ready? Let's go!"
  version: 2.0.0
servers:
- url: https://api-v2-sandbox.finerio.mx
  description: Sandbox server
- url: https://api-v2.finerio.mx
  description: Production server
tags:
  - name: Access
    description: Here you start! You need to login first in order to use the API. After
      that, you need to refresh your access token every time it expires.
  - name: Countries
    description: Available countries.
  - name: Banks
    description: Banks are the financial institutions where your customers keep their
      money.
  - name: Customers
    description: A customer is the representation of your customer's application.
  - name: Credentials
    description: A credential is the representation of your customer online bank data.
  - name: Accounts
    description: An account is the representation of your customer's bank accounts.
  - name: Transactions
    description: A transaction is the representation of the financial movements within a
      bank account.
  - name: Fiscal data
    description: Fiscal data of your customers.
  - name: Insights
    description: Insights and datapoints about your customer's financial information.
  - name: Callbacks
    description: A callback is the URL of your server where we send you several information about your customer's online bank.
  - name: Categories
    description: Categories are the classification of transactions, if available.
  - name: Callbacks bodies
    description: These are the structures of the data you receive in each webhook you
      register in Finerio Connect.
security:
  - OAuth2: []
paths:
  /oauth/token:
    post:
      security:
        - BasicAuth: []
      tags:
        - Access
      summary: Gets access information.
      description: With this endpoint, you will get or refresh an access token that grants you access to all the endpoints of the API.
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: The username provided by Finerio Connect.
                  example: username
                password:
                  type: string
                  description: The password provided by Finerio Connect.
                  example: password
                grant_type:
                  type: string
                  description: The type of grant used. It should be "password" for login and "refresh_token" for token refreshing.
                  example: password
                refresh_token:
                  type: string
                  description: The refresh token previously obtained in another request. It should be used in conjuntion with "refresh_token" grant type only for token refreshing.
                  example: 37b294e8-bde2-44b4-a8fd-a71cb284bc20
              required:
                - username
                - password
                - grant_type
      responses:
        '200':
          description: "Everything was OK. You successfully obtained your access token. This access token should be sent in all your requests as an 'Authorization: Bearer yourAccessToken' header."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
  /countries:
    get:
      tags:
      - Countries
      summary: Fetches a list of countries.
      description: Fetches a list of available countries where Finerio Connect has banks implemented.
      responses:
        '200':
          description: A List of countries.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Countries'
        '500':
          description: Something in the server was wrong.
  /banks:
    get:
      tags:
        - Banks
      summary: Get a list of banks
      description: Get all the banks and financial institutions with which Finerio can connect and fetch information.
      parameters:
        - in: query
          name: country
          required: false
          schema:
            type: string
          description: "The code of the country. By default is 'MX'."
          example: 'MX'
        - in: query
          name: type
          required: false
          schema:
            $ref: '#/components/schemas/BankType'
          description: "The type of bank. By default is 'personal'."
      responses:
        '200':
          description: Everything was OK. You successfully obtained the list of banks.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bank'
        '400':
          description: Whoops! Something went wrong with your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
  /banks/{id}/fields:
    get:
      tags:
        - Banks
      summary: Get a list of the fields per bank
      description: Get a list of the fields required to login into the bank website.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 123
          required: true
          description: The ID of the bank.
      responses:
        '200':
          description: Everything was OK. You successfully obtained the list of fields.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BankField'
  /customers:
    post:
      tags:
        - Customers
      summary: Create a customer
      description: You need to register your customers in order to get their bank information. Don't worry, you just need to assign a unique name to each one, such as an email or an application ID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomer'
      responses:
        '201':
          description: Everything was OK. You have successfully registered a customer.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: Whoops! Something went wrong with your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
    get:
      tags:
        - Customers
      summary: Get a list of customers
      description: You can get a list of the customers you have registered. If you don't
        send any query parameter, you will get your first 100 customers. If you
        have more than 100, then you can use the 'nextCursor' parameter you
        received in the response of the first request and send it as the
        'cursor' query parameter.
      parameters:
        - in: query
          name: maxResults
          required: false
          schema:
            type: integer
          description: The max number of items that can be fetched. Defaults to and only
            allows up to 100.
        - in: query
          name: cursor
          required: false
          schema:
            type: integer
          description: The ID of the first element of the response that you will receive.. It represents the starting point of your request.
      responses:
        '200':
          description: Everything was OK. You successfully obtained a list of customers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerList'
        '400':
          description: Whoops! Something went wrong with your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: Whoops! You requested something that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
  /customers/{id}:
    get:
      tags:
        - Customers
      summary: Get a customer
      description: You can fetch the information of each customer.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the customer.
      responses:
        '200':
          description: Everything was OK. You successfully fetched the customer
            information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: Whoops! Something went wrong with your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: Whoops! You requested something that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
    put:
      tags:
        - Customers
      summary: Update a customer
      description: Update the data for a customer.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the customer.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomer'
      responses:
        '200':
          description: Everything was OK. You successfully updated the customer information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: Whoops! Something went wrong with your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: Whoops! You requested something that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
    delete:
      tags:
        - Customers
      summary: Delete a customer
      description: Delete a customer from the system.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the customer.
      responses:
        '204':
          description: Everything was OK. You successfully deleted the customer information.
        '400':
          description: Whoops! Something went wrong with your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: Whoops! You requested something that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
  /credentials:
    post:
      tags:
        - Credentials
      summary: Create a credential.
      description: "With a given customer, you can register an online bank credential. A credential contains login access to the customer's online bank, so you must handle this information very carefully. Don't be afraid: the data will not be accepted if it is unprotected. You must send it encrypted with the Finerio Connect API Public Key (we provide it to you when we give you your access data for the API). The algorithm used for the encription is RSA with PKCS1-v1_5 scheme."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCredential'
      responses:
        '201':
          description: Everything was OK. You successfully registered a credential and we have begun to process it.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credential'
        '400':
          description: Whoops! Something went wrong with your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: Whoops! You requested something that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
    get:
      tags:
        - Credentials
      summary: Get a list of credentials
      description: With a customer ID, you can obtain a list of the credentials you have registered for the customer. If you don't send any query parameter, you will get your first 100 credentials. If you have more than 100, then you can use the 'nextCursor' parameter you received in the response of the first request and send it as the 'cursor' query parameter.
      parameters:
        - in: query
          name: customerId
          required: true
          schema:
            type: integer
          description: The ID of the customer.
        - in: query
          name: maxResults
          required: false
          schema:
            type: integer
          description: The max number of items that can be fetched. Defaults to and only allows up to 100.
        - in: query
          name: cursor
          required: false
          schema:
            type: string
          description: The ID of the first element of the response that you will receive. It represents the starting point of your request.
      responses:
        '200':
          description: Everything was OK. You successfully obtained a list of credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialList'
        '400':
          description: Whoops! Something went wrong with your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: Whoops! You requested something that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
  '/credentials/{id}':
    get:
      tags:
        - Credentials
      summary: Get a credential
      description: You can fetch the information of each credential.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the credential.
      responses:
        '200':
          description: Everything was OK. You successfully obtained a credential.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credential'
        '400':
          description: Whoops! Something went wrong with your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: Whoops! You requested something that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
    put:
      tags:
        - Credentials
      summary: Update a credential
      description: "Update the data for a credential. A credential contains login access to the customer's online bank, so you must handle this information very carefully. Don't be afraid: the data  will not be accepted if it is unprotected. You must send it encrypted with the Finerio Connect API Public Key (we provide it to you when we give you your access data for the API). The algorithm used for the encription is RSA with PKCS1-v1_5 scheme."
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the credential.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCredential'
      responses:
        '204':
          description: Everything was OK. You successfully updated a credential and we have begun to process it
        '400':
          description: Whoops! Something went wrong with your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: Whoops! You requested something that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
    delete:
      tags:
        - Credentials
      summary: Delete a credential
      description: Delete the data of a credential from the system.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the credential.
      responses:
        '204':
          description: Everything was OK. You successfully deleted a credential.
        '400':
          description: Whoops! Something went wrong with your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: Whoops! You requested something that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
  /credentials/{id}/interactive:
    put:
      tags:
        - Credentials
      summary: Sends a token of a credential
      description: If you received an NOTIFY callback with a stage 'interactive', you must request your user his token and then you have to send it to the API through this endpoint.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the credential.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialTokenBody'
      responses:
        '200':
          description: Everything was OK. You successfully sent a token.
        '400':
          description: Whoops! Something went wrong with your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: Whoops! You requested something that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
  /credentials/messages/failure:
    get:
      tags:
        - Credentials
      summary: Get a list of credential errors
      description: Retrieves a catalog of all possible credential errors can occur during a sincronization
      responses:
        '200':
          description: >-
            Everything was OK. You successfully obtained a list of credential
            errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialErrorList'
  /accounts:
    get:
      tags:
        - Accounts
      summary: Get a list of accounts
      description: With a credential ID, you can obtain a list of the accounts you have fetched from this credential. If you don't send any query parameter, you will get your first 100 accounts. If you have more than 100, then you can use the 'nextCursor' parameter you received in the response of the first request and send it as the 'cursor' query parameter.
      parameters:
        - in: query
          name: credentialId
          required: true
          schema:
            type: string
          description: The ID of the credential.
        - in: query
          name: maxResults
          required: false
          schema:
            type: integer
          description: The max number of items that can be fetched. Defaults to and only allows up to 100.
        - in: query
          name: cursor
          required: false
          schema:
            type: string
          description: The ID of the first element of the response that you will receive. It represents the starting point of your request.
      responses:
        '200':
          description: Everything was OK. You successfully obtained a list of accounts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountList'
        '400':
          description: Whoops! Something went wrong with your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: Whoops! You requested something that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
  /accounts/{id}/details:
    get:
      tags:
        - Accounts
      summary: Get a list of details of an account
      description: With an account ID, you can obtain a list of the details of an account.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the account.
      responses:
        '200':
          description: Everything was OK. You successfully obtained a list of details of an account.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountDetails'
        '400':
          description: Whoops! Something went wrong with your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: Whoops! You requested something that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
  /accounts/{id}/balance:
    get:
      tags:
        - Accounts
      summary: Get the balance of an account
      description: With an account ID, you can obtain the balance of an account.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the account.
      responses:
        '200':
          description: Everything was OK. You successfully obtained the balance of an account.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountBalance'
        '400':
          description: Whoops! Something went wrong with your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: Whoops! You requested something that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
  /transactions:
    get:
      tags:
        - Transactions
      summary: Get a list of transactions
      description: With an account ID, you can obtain a list of the transactions you have fetched from this account. If you don't send any query parameter, you will get your first 100 transactions. If you have more than 100, then you can use the 'nextCursor' parameter you received in the response of the first request and send it as the 'cursor' query parameter.
      parameters:
        - in: query
          name: accountId
          required: true
          schema:
            type: string
          description: The ID of the account.
        - in: query
          name: maxResults
          required: false
          schema:
            type: integer
          description: The max number of items that can be fetched. Defaults to and only allows up to 100.
        - in: query
          name: cursor
          required: false
          schema:
            type: integer
          description: The ID of the first element of the response that you will receive. It represents the starting point of your request.
      responses:
        '200':
          description: Everything was OK. You successfully obtained a list of transactions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionList'
        '400':
          description: Whoops! Something went wrong with your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: Whoops! You requested something that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
  /invoices:
    get:
      tags:
        - Fiscal data
      summary: Get a list of invoices
      description: With a customer ID, you can obtain a list of invoices.
      parameters:
        - in: query
          name: customerId
          required: true
          schema:
            type: integer
          description: The ID of the customer.
        - in: query
          name: maxResults
          required: false
          schema:
            type: integer
          description: The max number of items that can be fetched. Defaults to and only allows up to 100.
        - in: query
          name: cursor
          required: false
          schema:
            type: string
          description: The ID of the first element of the response that you will receive. It represents the starting point of your request.
      responses:
        '200':
          description: Everything was OK. You successfully obtained a list of invoices.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceList'
        '400':
          description: Whoops! Something went wrong with your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: Whoops! You requested something that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
  /invoices/{uuid}:
    get:
      tags:
        - Fiscal data
      summary: Get the information of an invoice.
      description: With the UUID of an invoice, you can obtain an invoice in different formats.
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
          description: The UUID of the invoice.
      responses:
        '200':
          description: Everything was OK. You successfully obtained an invoice.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
            text/xml:
              schema:
                type: string
                format: binary
            application/pdf:
              schema:
                type: string
                format: binary
        '404':
          description: Whoops! You requested something that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
  /summary:
    get:
      tags:
      - Insights
      summary: Fetches a summary of the financial information of a customer.
      description: Given a valid customer ID, fetches a summary of the financial information of a customer. It contains expenses, incomes and balances.
      parameters:
      - in: query
        name: customerId
        schema:
          type: integer
        required: true
        description: The ID of the customer to fetch the summary.
        example: 123
      responses:
        '200':
          description: The summary of a customer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Summary'
        '400':
          description: Whoops! Something went wrong with your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: Whoops! You requested something that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
  /analysis:
    get:
      tags:
      - Insights
      summary: Fetches an analysis of the financial information of a customer.
      description: Given a valid customer ID, fetches an analysis of the financial information of a customer.
      parameters:
      - in: query
        name: customerId
        schema:
          type: integer
        required: true
        description: The ID of the customer to fetch the analysis.
        example: 123
      responses:
        '200':
          description: The analysis of a customer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Analysis'
        '400':
          description: Whoops! Something went wrong with your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: Whoops! You requested something that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
  /diagnosis:
    get:
      tags:
      - Insights
      summary: Fetches a diagnosis of the financial information of a customer.
      description: Given a valid customer ID, fetches a diagnosis of the financial information of a customer.
      parameters:
      - in: query
        name: customerId
        schema:
          type: integer
        required: true
        description: The ID of the customer to fetch the diagnosis.
        example: 123
      - in: query
        name: averageIncome
        schema:
          type: number
        required: false
        description: A custom average income of the customer. By default is calculated.
        example: 123.45
      responses:
        '200':
          description: The diagnosis of a customer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Diagnosis'
        '400':
          description: Whoops! Something went wrong with your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: Whoops! You requested something that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
  /clients/callbacks:
    post:
      tags:
        - Callbacks
      summary: Create a callback
      description: You can register several callbacks for your server application. We send them important information about the credentials of your customers, and primarily we notify you about the status of the connections we make to the banks. This is not required, but it is strongly recommended that you provide callbacks in order to keep your application synced  with our API in real time.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCallback'
      responses:
        '201':
          description: Everything was OK. You successfully registered a callback.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Callback'
        '400':
          description: Whoops! Something went wrong with your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
    get:
      tags:
        - Callbacks
      summary: Get a list of callbacks
      description: You can obtain a list of the callbacks you have registered.
      responses:
        '200':
          description: Everything was OK. You successfully obtained a list of callbacks.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallbackList'
  /clients/callbacks/{id}:
    get:
      tags:
        - Callbacks
      summary: Get a callback
      description: You can fetch the information of an individual callback.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the callback.
      responses:
        '200':
          description: Everything was OK. You obtained a callback successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Callback'
        '400':
          description: Whoops! Something went wrong with your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: Whoops! You requested something that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
    put:
      tags:
        - Callbacks
      summary: Update a callback
      description: You can update the information of an individual callback.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the callback.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCallback'
      responses:
        '200':
          description: Everything was OK. You updated a callback successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Callback'
        '400':
          description: Whoops! Something went wrong with your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: Whoops! You requested something that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
    delete:
      tags:
        - Callbacks
      summary: Deletes a callback
      description: You can delete the information of an individual callback.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the callback.
      responses:
        '204':
          description: Everything was OK. You deleted a callback successfully.
        '400':
          description: Whoops! Something went wrong with your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: Whoops! You requested something that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
  /categories:
    get:
      tags:
        - Categories
      summary: Get a list of categories
      description: Get all the categories with which Finerio can classify transactions.
      responses:
        '200':
          description: Everything was OK. You successfully obtained the list of categories.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
  /your/NOTIFY/callback:
    post:
      security: []
      tags:
        - Callbacks bodies
      summary: NOTIFY callback body.
      description: This is an example of the body sent to your NOTIFY callback. This callback notifies you about all stages of credential processing.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotifyCallback'
      responses:
        '200':
          description: It is recommended that you send a 200 OK from your server.
  /your/ACCOUNTS/callback:
    post:
      security: []
      tags:
        - Callbacks bodies
      summary: ACCOUNTS callback body.
      description: This is an example of the body sent to your ACCOUNTS callback. Through this callback you will receive all accounts information.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountsCallback'
      responses:
        '200':
          description: It is recommended that you send a 200 OK from your server.
  /your/TRANSACTIONS/callback:
    post:
      security: []
      tags:
        - Callbacks bodies
      summary: TRANSACTIONS callback body.
      description: This is an example of the body sent to your TRANSACTIONS callback. Through this callback you will receive all transactions information.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionsCallback'
      responses:
        '200':
          description: It is recommended that you send a 200 OK from your server.
  /your/SUCCESS/callback:
    post:
      security: []
      tags:
        - Callbacks bodies
      summary: SUCCESS callback body.
      description: This is an example of the body sent to your SUCCESS callback. This callback means the end of a credential successful processing.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SuccessCallback'
      responses:
        '200':
          description: It is recommended that you send a 200 OK from your server.
  /your/FAILURE/callback:
    post:
      security: []
      tags:
        - Callbacks bodies
      summary: FAILURE callback body.
      description: This is an example of the body sent to your FAILURE callback. This callback means the end of a credential failed processing.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FailureCallback'
      responses:
        '200':
          description: It is recommended that you send a 200 OK from your server.
  /your/BANKS/callback:
    post:
      security: []
      tags:
        - Callbacks bodies
      summary: BANKS callback body.
      description: This is an example of the body sent to your BANKS callback. Through this one, we will notify you if a bank is deactivated due to maintenance and when it is reactivated again.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BanksCallback'
      responses:
        '200':
          description: It is recommended that you send a 200 OK from your server.
components:
  schemas:
    LoginResponse:
      description: A representation of the data returned by login.
      properties:
        access_token:
          type: string
          example: 21987ece-353e-4d04-a587-db97201f59ea
        token_type:
          type: string
          example: bearer
        refresh_token:
          type: string
          example: 21987ece-353e-4d04-a587-db97201f59ea
        expires_in:
          type: integer
          example: 3600
        scope:
          type: string
          example: read write
    Country:
      description: A representation of a country.
      properties:
        code:
          description: The code of the country.
          type: string
          example: 'MX'
        name:
          description: The name of the country.
          type: string
          example: 'México'
        imageUrl:
          description: The URL of the image of the country
          type: string
          example: 'https://cdn.finerio.mx/widget/MX.png'
    Countries:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Country'
        nextCursor:
          type: string
          example:  null
    Bank:
      properties:
        id:
          type: integer
          description: The unique ID of the bank.
          example: 1
        name:
          type: string
          description: The commercial name of the bank.
          example: Banamex
        code:
          type: string
          description: The code of the bank.
          example: BNMX
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
          description: The current status of the bank. If a bank has an INACTIVE status, it means we cannot fetch information from it for some external reason.
          example: ACTIVE
    BankField:
      properties:
        name:
          type: string
          description: The key name of the field to be used in the creation of a credential.
          example: username
        friendlyName:
          type: string
          description: The name of the field shown to the user in the website.
          example: Nombre de usuario
        position:
          type: integer
          description: The position of the field in the HTML web form.
          example: 1
        type:
          type: string
          enum:
            - TEXT
            - PASSWORD
          description: The type of the textfield in the HTML web form.
          example: TEXT
    BankType:
      type: string
      enum:
        - personal
        - business
        - fiscal
    Customer:
      properties:
        id:
          type: integer
          description: The unique ID of the customer.
          example: 1
        name:
          type: string
          description: The unique name of the customer you provided.
          example: Customer name
        dateCreated:
          type: integer
          description: "The date when the customer was created. It is represented as the
          number of milliseconds since 1970 (Epoch time)"
          example: 1519838992000
    CreateCustomer:
      properties:
        name:
          type: string
          description: The name of your customer. It can be an email, a number, a UUID or anything that you choose.
          example: mycustomer@email.com
      required:
        - name
    CustomerList:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Customer'
        nextCursor:
          type: integer
          description: The ID of the customer that can be used as the "nextCursor" parameter.
          example: 1
    Credential:
      properties:
        id:
          type: string
          description: The unique ID of the credential.
          example: 37b294e8-bde2-44b4-a8fd-a71cb284bc20
        username:
          type: string
          description: The username related to this credential.
          example: username
        status:
          type: string
          description: "The current status of the credential.
  
            - 'ACTIVE' signifies for a valid credential, which means that we can
            successfully fetch data from it.
  
            - 'PENDING' means that we are processing the credential.
  
            - 'INVALID' means that we could not process your request with the
            information you provided. We're sorry."
          enum:
            - ACTIVE
            - PENDING
            - INVALID
          example: ACTIVE
        automaticFetching:
          type: boolean
          description: Indicates if the credential should be fetched automatically by Finerio Connect.
          example: true
        dateCreated:
          type: integer
          description: The date when the credential was created. It is represented as the number of milliseconds since 1970 (Epoch time).
          example: 1519838992000
    CreateCredential:
      properties:
        customerId:
          type: integer
          description: The ID of the customer related to this credential.
          example: 1
        bankId:
          type: integer
          description: The ID of the bank related to this credential.
          example: 1
        username:
          type: string
          description: The username associated with this credential. It must be encrypted with the Finerio Connect API Public Key and must be encoded using Base64.
          example: dXNlcm5hbWVldWJ0ZnZ1dHlmYnZpbnl1aGd2dXRyZHliZnRpZzd1dHlkeHllcnRma2dibmhqY2ZieGRyeXN2dGRydWJmaWdub3VsaWhtbm91Z25mOG50eWlmdG5ndml1a2hqbWJuamdmYmR1eWdudmtoZ3ZudXloZm5jdnlpZ2t1aGI=
        password:
          type: string
          description: The password associated with this credential. It must be encrypted with the Finerio Connect API Public Key and must be encoded using Base64.
          example: dXNlcm5hbWVldWJ0ZnZ1dHlmYnZpbnl1aGd2dXRyZHliZnRpZzd1dHlkeHllcnRma2dibmhqY2ZieGRyeXN2dGRydWJmaWdub3VsaWhtbm91Z25mOG50eWlmdG5ndml1a2hqbWJuamdmYmR1eWdudmtoZ3ZudXloZm5jdnlpZ2t1aGI=
        securityCode:
          type: string
          description: The security code associated with this credential. It must be encrypted with the Finerio Connect API Public Key and must be encoded using Base 64. Only for HSBC credentials.
          example: dXNlcm5hbWVldWJ0ZnZ1dHlmYnZpbnl1aGd2dXRyZHliZnRpZzd1dHlkeHllcnRma2dibmhqY2ZieGRyeXN2dGRydWJmaWdub3VsaWhtbm91Z25mOG50eWlmdG5ndml1a2hqbWJuamdmYmR1eWdudmtoZ3ZudXloZm5jdnlpZ2t1aGI=
        token:
          type: string
          description: The token associated with this credential. It must be encrypted with the Finerio Connect API Public Key and must be encoded using Base 64. Only for Santander Business credentials.
          example: dXNlcm5hbWVldWJ0ZnZ1dHlmYnZpbnl1aGd2dXRyZHliZnRpZzd1dHlkeHllcnRma2dibmhqY2ZieGRyeXN2dGRydWJmaWdub3VsaWhtbm91Z25mOG50eWlmdG5ndml1a2hqbWJuamdmYmR1eWdudmtoZ3ZudXloZm5jdnlpZ2t1aGI=
        automaticFetching:
          type: boolean
          description: Indicates if the credential should be fetched automatically by Finerio Connect.
          example: true
        startDate:
          type: string
          description: The start date of the financial information, in yyyy-MM-dd format. By default is three months before the current date.
          example: '2021-12-01'
        endDate:
          type: string
          description: The end date of the financial information, in yyyy-MM-dd format. By default is the current date.
          example: '2021-12-01'
      required:
        - username
        - password
        - bankId
        - customerId
    CredentialList:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Credential'
        nextCursor:
          type: string
          description: "The ID of the credential that can be used as the 'nextCursor' parameter."
          example: 37b294e8-bde2-44b4-a8fd-a71cb284bc20
    UpdateCredential:
      properties:
        password:
          type: string
          description: The password associated with this credential. It must be encrypted with the Finerio Connect API Public Key and must be encoded using Base64.
          example: dXNlcm5hbWVldWJ0ZnZ1dHlmYnZpbnl1aGd2dXRyZHliZnRpZzd1dHlkeHllcnRma2dibmhqY2ZieGRyeXN2dGRydWJmaWdub3VsaWhtbm91Z25mOG50eWlmdG5ndml1a2hqbWJuamdmYmR1eWdudmtoZ3ZudXloZm5jdnlpZ2t1aGI=
        securityCode:
          type: string
          description: The security code associated with this credential. It must be encrypted with the Finerio Connect API Public Key and must be encoded using Base 64. Only for HSBC credentials.
          example: dXNlcm5hbWVldWJ0ZnZ1dHlmYnZpbnl1aGd2dXRyZHliZnRpZzd1dHlkeHllcnRma2dibmhqY2ZieGRyeXN2dGRydWJmaWdub3VsaWhtbm91Z25mOG50eWlmdG5ndml1a2hqbWJuamdmYmR1eWdudmtoZ3ZudXloZm5jdnlpZ2t1aGI=
        automaticFetching:
          type: boolean
          description: Indicates if the credential should be fetched automatically by Finerio Connect.
          example: true
        startDate:
          type: string
          description: The start date of the financial information, in yyyy-MM-dd format. By default is three months before the current date.
          example: '2021-12-01'
        endDate:
          type: string
          description: The end date of the financial information, in yyyy-MM-dd format. By default is the current date.
          example: '2021-12-01'
    CredentialTokenBody:
      properties:
        token:
          type: string
          description: The token of the credential.
          example: '12345678'
    CredentialErrorList:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/CredentialError'
        nextCursor:
          type: string
          format: uuid
          description: The ID of the credential error that can be used as the "nextCursor"
            parameter.
          example: null
    CredentialError:
      properties:
        code:
          type: number
          description: The code of the credential error.
          example: 401
        key:
          type: string
          description: The key of the credential error.
          example: invalid_credentials
        description:
          type: string
          description: A brief description of the credential error.
          example: Username, password or token are incorrect
        text:
          type: string
          description: A user friendly description of the credential error.
          example: Tu banca en línea está bloqueada. Sigue el procedimiento de tu banco para desbloquearla e intenta nuevamente sincronizar tu cuenta
    Account:
      properties:
        id:
          type: string
          description: The ID of the account.
          example: 37b294e8-bde2-44b4-a8fd-a71cb284bc20
        name:
          type: string
          description: The name of the account.
          example: CLASICA - MXN-078
        number:
          type: string
          description: The number of the account.
          example: 61***4540
        balance:
          type: number
          description: The balance of the account.
          example: 123.45
        type:
          $ref: '#/components/schemas/AccountType'
        currency:
          type: string
          description: The currency of the account.
          example: 'MXN'
        bankId:
          type: integer
          description: The ID of the bank related to this account.
          example: 1
        customerId:
          type: integer
          description: The ID of the customer related to this account.
          example: 1
        dateCreated:
          type: integer
          description: The date that the account creation was performed. It is represented as the number of milliseconds since 1970 (Epoch time)
          example: 1519838992000
    AccountType:
      type: string
      description: The type of the account.
      enum:
        - Débito
        - Crédito
        - Cheques
        - Inversión
        - Préstamo
        - Hipoteca
        - Ahorros
        - Seguro
        - Bono
        - Monedero electrónico
        - Tarjeta
        - Cuenta
    AccountList:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Account'
        nextCursor:
          type: string
          format: uuid
          description: The ID of the account that can be used as the "nextCursor" parameter.
          example: 37b294e8-bde2-44b4-a8fd-a71cb284bc20
    AccountDetails:
      properties:
        creditLimit:
          type: string
          description: >-
            The max credit limit of an account. This is a legacy field. Use
            'credit.creditLimit' node instead.
          example: 123.45
        cardNumber:
          type: string
          description: >-
            The masked card number of an account, if available. This is a legacy
            field. Use 'credit.cardNumber' node instead.
          example: XXXX1234
        name:
          type: string
          description: >-
            The name of the account owner. This is a legacy field. Use 'user.name'
            node instead.
          example: John Doe
        clabe:
          type: string
          description: >-
            The CLABE of the account. This is a legacy field. Use 'debit.clabe'
            node instead.
          example: '1234567890123456'
        user:
          $ref: '#/components/schemas/AccountUser'
        debit:
          $ref: '#/components/schemas/AccountDebit'
        credit:
          $ref: '#/components/schemas/AccountCredit'
        extra:
          type: array
          items:
            $ref: '#/components/schemas/AccountExtra'
    AccountUser:
      description: Information about account owner
      properties:
        name:
          type: string
          description: The name of the account owner.
          example: John Doe
    AccountDebit:
      description: Information of debit accounts
      properties:
        clabe:
          type: string
          description: The CLABE of the account.
          example: '123456789012345678'
    AccountCredit:
      description: Information of credit accounts
      properties:
        creditLimit:
          type: number
          description: The credit limit of the account.
          example: 123.45
        closingDate:
          type: number
          description: The closing date of the account.
          example: 1587567125458
        lastClosingDate:
          type: number
          description: The last closing date of the account.
          example: 1587567125458
        nonInterestPayment:
          type: number
          description: The non interest payment of the account.
          example: 123.45
        statementBalance:
          type: number
          description: The statement balance of the account.
          example: 123.45
        minimumPayment:
          type: number
          description: The minimum payment of the account.
          example: 123.45
        dueDate:
          type: number
          description: The due date of the account.
          example: 1587567125458
        annualPercentageRate:
          type: number
          description: The annual percentage rate of the account.
          example: 75.2
        cardNumber:
          type: string
          description: The card number of the account.
          example: '1234567890123456'
        availableBalance:
          type: number
          description: The available balance of the account.
          example: 123.45
    AccountExtra:
      description: >-
        Extra information of the account. IMPORTANT: this information may vary
        from bank to bank and is very likely to change. DO NOT USE IT IN CRITICAL
        PARTS OF YOUR IMPLEMENTATION.
      properties:
        name:
          type: string
          description: The name of the property.
          example: myExtraName
        value:
          type: string
          description: The value of the property.
          example: myExtraValue
    AccountBalance:
      description: The balance of an account
      properties:
        lastBalance:
          description: The last balance of the account.
          type: number
          example: 123.45
        average:
          description: The average of the balance of the account.
          type: number
          example: 123.45
        history:
          description: The history of the balance.
          type: array
          items:
            $ref: '#/components/schemas/BalanceRow'
    BalanceRow:
      description: An item of the balance history of an account.
      properties:
        transaction:
          $ref: '#/components/schemas/Transaction'
        amountBeforeTransaction:
          description: The amount of the balance before the transaction was executed.
          type: number
          example: 123.45
        amountAfterTransaction:
          description: The amount of the balance after the transaction was executed.
          type: number
          example: 123.45
    Transaction:
      properties:
        id:
          type: integer
          description: The ID of the transaction.
          example: 1
        description:
          type: string
          description: A detailed description of the transaction
          example: CARGO PAGO TARJETA CREDITO
        cleanedDescription:
          type: string
          description: A cleaned description of the transaction
          example: PAGO TARJETA DE CREDITO
        amount:
          type: number
          description: The amount of the transaction.
          example: 123.45
        isCharge:
          type: boolean
          description: Indicates if the transaction is a charge.
        date:
          type: integer
          description: The date that the transaction was performed. It is represented as the number of milliseconds since 1970 (Epoch time)
          example: 1519838992000
        categoryId:
          type: string
          description: The category ID of this transaction, if available.
          example: 37b294e8-bde2-44b4-a8fd-a71cb284bc20
        duplicated:
          type: boolean
          description: Indicates if the transaction is duplicated of another one.
        balance:
          type: number
          description: The balance of the account of the transaction.
          example: 123.45
        currency:
          type: string
          description: The currency of the transaction.
          example: 'MXN'
    TransactionList:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Transaction'
        nextCursor:
          type: integer
          description: The ID of the transaction that can be used as the "nextCursor" parameter.
          example: 1
    Callback:
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the callback.
          example: 1
        url:
          type: string
          description: The url of the callback.
          example: 'https://example.com/callback'
        nature:
          type: string
          description: The nature of the callback.
          enum:
            - NOTIFY
            - SUCCESS
            - FAILURE
            - ACCOUNTS
            - TRANSACTIONS
            - BANKS
        dateCreated:
          type: integer
          format: int64
          description: >-
            The date when the callback was created. It is represented as the
            number of milliseconds since 1970 (Epoch time)
          example: 1519838992000
        lastUpdated:
          type: integer
          format: int64
          description: >-
            The date that the callback was updated. It is represented as the
            number of milliseconds since 1970 (Epoch time)
          example: 1519838992000
    CreateCallback:
      properties:
        url:
          type: string
          description: The url of the callback.
          example: 'https://example.com/callback'
        nature:
          type: string
          description: The nature of the callback.
          enum:
            - NOTIFY
            - SUCCESS
            - FAILURE
            - ACCOUNTS
            - TRANSACTIONS
            - BANKS
          example: NOTIFY
      required:
        - url
        - nature
    CallbackList:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Callback'
        nextCursor:
          type: integer
          format: int64
          description: The ID of the callback that can be used as the "nextCursor" parameter.
          example: 1
    UpdateCallback:
      properties:
        url:
          type: string
          description: The url of the callback.
          example: 'https://example.com/callback'
      required:
        - url
    Category:
      properties:
        id:
          type: string
          format: uuid
          description: The unique ID of the category
          example: 1
        name:
          type: string
          description: The name of the category
          example: Alimentos
        parentId:
          type: string
          format: uuid
          description: The parent of this category.
          example: 37b294e8-bde2-44b4-a8fd-a71cb284bc20
    NotifyCallback:
      properties:
        customerId:
          type: integer
          description: The unique ID of the customer.
          example: 1
        credentialId:
          type: string
          description: The unique ID of the credential.
          example: 37b294e8-bde2-44b4-a8fd-a71cb284bc20
        stage:
          $ref: '#/components/schemas/CallbackStage'
        bankToken:
          type: number
          description: A bank token sent by Banorte used to exchange with user token.
          example: 12345
    CallbackStage:
      type: string
      enum:
        - start
        - connect
        - fetch_accounts
        - fetch_transactions
        - categorize_transactions
        - interactive
    AccountsCallback:
      properties:
        customerId:
          type: integer
          description: The unique ID of the customer.
          example: 1
        credentialId:
          type: string
          description: The unique ID of the credential.
          example: 37b294e8-bde2-44b4-a8fd-a71cb284bc20
        account:
          $ref: '#/components/schemas/Account'
        accountDetails:
          $ref: '#/components/schemas/AccountDetails'
    TransactionsCallback:
      properties:
        customerId:
          type: integer
          description: The unique ID of the customer.
          example: 1
        credentialId:
          type: string
          description: The unique ID of the credential.
          example: 37b294e8-bde2-44b4-a8fd-a71cb284bc20
        accountId:
          type: string
          description: The unique ID of the account related to the credential ID.
          example: 37b294e8-bde2-44b4-a8fd-a71cb284bc20
        transactions:
          $ref: '#/components/schemas/Transactions'
    Transactions:
      type: array
      items:
        $ref: '#/components/schemas/Transaction'
    SuccessCallback:
      properties:
        customerId:
          type: integer
          description: The unique ID of the customer.
          example: 1
        credentialId:
          type: string
          description: The unique ID of the credential.
          example: 37b294e8-bde2-44b4-a8fd-a71cb284bc20
    FailureCallback:
      properties:
        customerId:
          type: integer
          description: The unique ID of the customer.
          example: 1
        credentialId:
          type: string
          description: The unique ID of the credential.
          example: 37b294e8-bde2-44b4-a8fd-a71cb284bc20
        message:
          type: string
          description: A detail description of the error.
          example: >-
            Tu usuario o contraseña son incorrectos. Utiliza las claves de acceso
            del portal de banca en línea.
        code:
          type: string
          description: A unique code of the error.
          example: '401'
    BanksCallback:
      properties:
        bankId:
          type: integer
          description: The ID of the bank related to this credential.
          example: 1
        status:
          $ref: '#/components/schemas/BankStatus'
    BankStatus:
      type: string
      description: The status of the bank.
      enum:
        - ACTIVE
        - INACTIVE
    Summary:
      description: A representation of the summary of the financial information of a customer.
      properties:
        incomes:
          description: The incomes of a customer, grouped by month by default.
          type: array
          items:
            $ref: '#/components/schemas/SummaryByMonth'
        expenses:
          description: The expenses of a customer, grouped by month by default
          type: array
          items:
            $ref: '#/components/schemas/SummaryByMonth'
        balances:
          description: The balance of the financial information of a customer, grouped by month by default.
          type: array
          items:
            $ref: '#/components/schemas/SummaryBalance'
    SummaryByMonth:
      description: Financial information grouped by month by default.
      properties:
        date:
          description: The year and month of the information
          type: integer
          example: 15912423261854
        amount:
          description: The amount of the month.
          type: number
          example: 123.45
        categories:
          description: The financial information grouped by categories
          type: array
          items:
            $ref: '#/components/schemas/SummaryByCategory'
    SummaryByCategory:
      description: Financial information grouped by category
      properties:
        categoryId:
          type: string
          description: The ID of the category.
          example: 37b294e8-bde2-44b4-a8fd-a71cb284bc20
        amount:
          description: The amount of the category.
          type: number
          example: 123.45
        subcategories:
          description: The financial information grouped by subcategories
          type: array
          items:
            $ref: '#/components/schemas/SummaryBySubcategory'
    SummaryBySubcategory:
      description: Financial information grouped by subcategory
      properties:
        categoryId:
          type: string
          description: The ID of the subcategory.
          example: 37b294e8-bde2-44b4-a8fd-a71cb284bc20
        amount:
          description: The amount of the subcategory.
          type: number
          example: 123.45
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/Transaction'
    SummaryBalance:
      description: The balance of the financial information of a customer, grouped by month
      properties:
        date:
          description: The year and month of the information
          type: integer
          example: 15912423261854
        incomes:
          description: The incomes of the month.
          type: number
          example: 123.45
        expenses:
          description: The expenses of the month.
          type: number
          example: 123.45
    Analysis:
      description: A representation of the analysis of the financial information of a customer.
      properties:
        data:
          description: The analysis of a customer, grouped by month by default.
          type: array
          items:
            $ref: '#/components/schemas/AnalysisByMonth'
    AnalysisByMonth:
      description: Financial information grouped by month by default.
      properties:
        date:
          description: The year and month of the information
          type: integer
          example: 15912423261854
        categories:
          description: The financial information grouped by categories
          type: array
          items:
            $ref: '#/components/schemas/AnalysisByCategory'
    AnalysisByCategory:
      description: Financial information grouped by category
      properties:
        categoryId:
          type: string
          description: The ID of the category.
          example: 37b294e8-bde2-44b4-a8fd-a71cb284bc20
        amount:
          description: The amount of the category.
          type: number
          example: 123.45
        subcategories:
          description: The financial information grouped by subcategories
          type: array
          items:
            $ref: '#/components/schemas/AnalysisBySubcategory'
    AnalysisBySubcategory:
      description: Financial information grouped by subcategory
      properties:
        categoryId:
          type: string
          description: The ID of the subcategory.
          example: 37b294e8-bde2-44b4-a8fd-a71cb284bc20
        average:
          description: The average of the subcategory.
          type: number
          example: 123.45
        quantity:
          description: The quantity of the subcategory.
          type: number
          example: 123
        amount:
          description: The amount of the subcategory.
          type: number
          example: 123.45
        transactions:
          description: The transactions grouped by date
          type: array
          items:
            $ref: '#/components/schemas/AnalysisByTransaction'
    AnalysisByTransaction:
      description: The transactions grouped by description
      properties:
        description:
          description: The description of the transaction
          type: string
          example: 'UBER EATS'
        average:
          description: The average of the transaction.
          type: number
          example: 123.45
        quantity:
          description: The quantity of the transaction.
          type: number
          example: 123
        amount:
          description: The amount of the transaction.
          type: number
          example: 123.45
    Diagnosis:
      description: A representation of the diagnosis of the financial information of a customer.
      properties:
        averageIncome:
          description: The average income of a customer.
          type: number
          example: 123.45
        data:
          description: The expenses of a customer, grouped by month by default
          type: array
          items:
            $ref: '#/components/schemas/DiagnosisByMonth'
    DiagnosisByMonth:
      description: Diagnosis grouped by month by default.
      properties:
        date:
          description: The year and month of the information
          type: integer
          example: 15912423261854
        categories:
          description: The diagnosis grouped by categories
          type: array
          items:
            $ref: '#/components/schemas/DiagnosisByCategory'
    DiagnosisByCategory:
      description: Diagnosis grouped by category
      properties:
        categoryId:
          type: string
          description: The ID of the category.
          example: 37b294e8-bde2-44b4-a8fd-a71cb284bc20
        spent:
          description: The amount spent by category.
          type: number
          example: 123.45
        average:
          description: The average of the category.
          type: number
          example: 123.45
        others:
          description: The amount of others in the category.
          type: number
          example: 123.45
        suggested:
          description: The suggested amount of the category.
          type: number
          example: 123.45
        subcategories:
          description: The diagnosis grouped by subcategories
          type: array
          items:
            $ref: '#/components/schemas/DiagnosisBySubcategory'
    DiagnosisBySubcategory:
      description: Financial information grouped by subcategory
      properties:
        categoryId:
          type: string
          description: The ID of the subcategory.
          example: 37b294e8-bde2-44b4-a8fd-a71cb284bc20
        amount:
          description: The amount of the subcategory.
          type: number
          example: 123.45
        advices:
          type: array
          items:
            $ref: '#/components/schemas/Advice'
    Advice:
      description: A financial advice by category
      properties:
        description:
          description: The description of the advice.
          type: string
          example: Spend less money in this category
    InvoiceList:
      description: A list of invoices.
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Invoice'
        nextCursor:
          type: integer
          description: The ID of the transaction that can be used as the "nextCursor" parameter.
          example: 1
    Invoice:
      description: An invoice.
      properties:
        date:
          type: number
          description: The date of the invoice
          example: 1587567125458
        issuer:
          type: string
          description: The RFC of the issuer
          example: AAAA010101AAA
        receiver:
          type: string
          description: The RFC of the receiver
          example: AAAA010101AAA
        total:
          type: number
          description: The total amount of the invoice
          example: 123.45
        status:
          type: string
          description: The status of the invoice
          example: 'VIGENTE'
        uuid:
          type: string
          description: The UUID of the invoice.
          example: 37b294e8-bde2-44b4-a8fd-a71cb284bc20
    Errors:
      properties:
        errors:
          type: array
          description: A List of errors
          items:
            $ref: '#/components/schemas/Error'
    Error:
      properties:
        code:
          type: string
          description: The code of the error. You can use this code for i18n messages inside your application.
          example: error.code
        title:
          type: string
          description: A brief explanation of the error.
          example: Error title
        detail:
          type: string
          description: A detailed explanation of the error. If this message is not self-explanatory, please let us know.
          example: Error detail
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
      description: The API uses BASIC Authentication with the client ID as a username and the client secret as a password. This authentication is used only in the /oauth/token endpoint
    OAuth2:
      type: oauth2
      description: This API uses OAuth 2 with the password grant flow.
      flows:
        password:
          tokenUrl: /oauth/token
          refreshUrl: /oauth/token
          scopes:
            read: Read operations.
            write: Write operations
