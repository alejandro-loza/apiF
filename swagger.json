{
  "swagger": "2.0",
  "info": {
    "title": "Finerio Banks API",
    "description": "Welcome to the Finerio Banks API! We hope you enjoy the journey to connect your application to our systems. With the Finerio Banks API, you can fetch bank information from your users, such as accounts, transactions, balances, and more.\n\nFirst, you need to acquire your login access.  We use OAuth2 with the 'password' type. Please contact us in order to obtain your login access.\n\nIn Finerio we utilize four standard fields to obtain an access token:\n- Client ID\n- Client secret\n- Username\n- Password\n\nOnce you get access to the API (an access token), you can start using the API HTTP endpoints. A normal flow consists of:\n- Register your callbacks (optional, but strongly recommended).\n- Create a customer.\n- Create a credential.\n- Wait to receive data in your callbacks.\n- Process the information received in your callbacks.\n- Get the accounts of a credential.\n- Get the transactions of an account.\n\nAre you ready? Let's go!",
    "version": "2.0.0",
    "termsOfService": "https://www.finerio.mx/terms",
    "contact": {
      "email": "contacto@finerio.mx"
    }
  },
  "host": "api-v2-testing.finerio.mx",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "security": [
    {
      "OAuth2": [
        "read",
        "write"
      ]
    }
  ],
  "tags": [
    {
      "name": "Banks",
      "description": "Banks are the financial institutions where your customers keep their money."
    },
    {
      "name": "Customers",
      "description": "A customer is the representation of your customer's application"
    },
    {
      "name": "Credentials",
      "description": "A credential is the representation of your customer online bank data"
    },
    {
      "name": "Accounts",
      "description": "An account is the representation of your custome's bank accounts"
    },
    {
      "name": "Transactions",
      "description": "A transaction is the representation of the movements of a bank account"
    },
    {
      "name": "Callbacks",
      "description": "A callback is the URL of your server where we send you several information about your customer's online bank"
    },
    {
      "name": "Categories",
      "description": "Categories are the classification of transactions, if available"
    }
  ],
  "paths": {
    "/banks": {
      "get": {
        "tags": [
          "Banks"
        ],
        "summary": "Get a list of banks.",
        "description": "Get all the banks and financial institutions with which Finerio can connect and fetch information.",
        "responses": {
          "200": {
            "description": "Everything was OK. You successfully obtained the list of banks.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Bank"
              }
            }
          }
        }
      }
    },
    "/customers": {
      "post": {
        "tags": [
          "Customers"
        ],
        "summary": "Create a customer.",
        "description": "You need to register your customers in order to get their bank information. Don't worry, you just need to assign a unique name to each one, such as an email or an application ID.",
        "parameters": [
          {
            "in": "body",
            "name": "customer",
            "description": "Required parameters to create a customer",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateCustomerBody"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Everything was OK. You have successfully registered a customer.",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "400": {
            "description": "Whoops! Something went wrong with your request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Customers"
        ],
        "summary": "Get a list of customers.",
        "description": "You can get a list of the customers you have registered. If you don't send any query parameter, you will get your first 100 customers. If you have more than 100, then you can use the 'nextCursor' parameter you received in the response of the first request and send it as the 'cursor' query parameter",
        "parameters": [
          {
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "integer",
            "description": "The max number of items that can be fetched. Defaults to and only allows up to 100."
          },
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "type": "integer",
            "description": "The ID of the first element of the response that you will receive. It represents the starting point of your request."
          }
        ],
        "responses": {
          "200": {
            "description": "Everything was OK. You successfully obtained a list of customers.",
            "schema": {
              "$ref": "#/definitions/CustomerList"
            }
          },
          "400": {
            "description": "Whoops! Something went wrong with your request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "Whoops! You requested something that doesn't exist",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/customers/{id}": {
      "get": {
        "tags": [
          "Customers"
        ],
        "summary": "Get a customer.",
        "description": "You can fetch the information of each customer.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "The ID of the customer"
          }
        ],
        "responses": {
          "200": {
            "description": "Everything was OK. You successfully fetched the customer information.",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "400": {
            "description": "Whoops! Something went wrong with your request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "Whoops! You requested something that doesn't exist",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/credentials": {
      "post": {
        "tags": [
          "Credentials"
        ],
        "summary": "Create a credential.",
        "description": "With a given customer, you can register an online bank credential. A credential contains login access to the customer's online bank, so you must handle this information very carefully. Don't be afraid: the data  will not be accepted if it is unprotected. You must send it encrypted with the Finerio Banks API Public Key (we provide it to you when we give you your access data for the API)",
        "parameters": [
          {
            "in": "body",
            "name": "Credential",
            "description": "Required parameters for creating a credential",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateCredentialBody"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Everything was OK. You successfully registered a credential and we have begun to process it",
            "schema": {
              "$ref": "#/definitions/Credential"
            }
          },
          "400": {
            "description": "Whoops! Something went wrong with your request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "Whoops! You requested something that doesn't exist",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Credentials"
        ],
        "summary": "Get a list of credentials",
        "description": "With a customer ID, you can obtain a list of the credentials you have registered for the customer. If you don't send any query parameter, you will get your first 100 credentials. If you have more than 100, then you can use the 'nextCursor' parameter you received in the response of the first request and send it as the 'cursor' query parameter",
        "parameters": [
          {
            "in": "query",
            "name": "customerId",
            "required": true,
            "type": "integer",
            "description": "The ID of the customer"
          },
          {
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "integer",
            "description": "The max number of items that can be fetched. Defaults to and only allows up to 100."
          },
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "type": "string",
            "format": "uuid",
            "description": "The ID of the first element of the response that you will receive. It represents the starting point of your request."
          }
        ],
        "responses": {
          "200": {
            "description": "Everything was OK. You successfully obtained a list of credentials.",
            "schema": {
              "$ref": "#/definitions/CredentialList"
            }
          },
          "400": {
            "description": "Whoops! Something went wrong with your request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "Whoops! You requested something that doesn't exist",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/credentials/{id}": {
      "get": {
        "tags": [
          "Credentials"
        ],
        "summary": "Get a credential.",
        "description": "You can fetch the information of each credential.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string",
            "format": "uuid",
            "description": "The ID of the credential"
          }
        ],
        "responses": {
          "200": {
            "description": "Everything was OK. You successfully obtained a credential.",
            "schema": {
              "$ref": "#/definitions/Credential"
            }
          },
          "400": {
            "description": "Whoops! Something went wrong with your request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "Whoops! You requested something that doesn't exist",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Credentials"
        ],
        "summary": "Update a credential.",
        "description": "Update the data for a credential. A credential contains login access to the customer's online bank, so you must handle this information very carefully. Don't be afraid: the data  will not be accepted if it is unprotected. You must send it encrypted with the Finerio Banks API Public Key (we provide it to you when we give you your access data for the API)",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string",
            "format": "uuid",
            "description": "The ID of the credential"
          },
          {
            "in": "body",
            "name": "Credential",
            "description": "Required parameters for updating a credential",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateCredentialBody"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Everything was OK. You successfully updated a credential and we have begun to process it",
            "schema": {
              "$ref": "#/definitions/Credential"
            }
          },
          "400": {
            "description": "Whoops! Something went wrong with your request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "Whoops! You requested something that doesn't exist",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/accounts": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Get a list of accounts",
        "description": "With a credential ID, you can obtain a list of the accounts you have fetched from this credential. If you don't send any query parameter, you will get your first 100 accounts. If you have more than 100, then you can use the 'nextCursor' parameter you received in the response of the first request and send it as the 'cursor' query parameter",
        "parameters": [
          {
            "in": "query",
            "name": "credentialId",
            "required": true,
            "type": "string",
            "format": "uuid",
            "description": "The ID of the credential"
          },
          {
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "integer",
            "description": "The max number of items that can be fetched. Defaults to and only allows up to 100."
          },
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "type": "string",
            "format": "uuid",
            "description": "The ID of the first element of the response that you will receive. It represents the starting point of your request."
          }
        ],
        "responses": {
          "200": {
            "description": "Everything was OK. You successfully obtained a list of accounts.",
            "schema": {
              "$ref": "#/definitions/AccountList"
            }
          },
          "400": {
            "description": "Whoops! Something went wrong with your request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "Whoops! You requested something that doesn't exist",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/transactions": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Get a list of transactions",
        "description": "With an account ID, you can obtain a list of the trasnactions you have fetched from this account. If you don't send any query parameter, you will get your first 100 trasnactions. If you have more than 100, then you can use the 'nextCursor' parameter you received in the response of the first request and send it as the 'cursor' query parameter",
        "parameters": [
          {
            "in": "query",
            "name": "accountId",
            "required": true,
            "type": "string",
            "format": "uuid",
            "description": "The ID of the account"
          },
          {
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "integer",
            "description": "The max number of items that can be fetched. Defaults to and only allows up to 100."
          },
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "type": "integer",
            "description": "The ID of the first element of the response that you will receive. It represents the starting point of your request."
          }
        ],
        "responses": {
          "200": {
            "description": "Everything was OK. You successfully obtained a list of transactions.",
            "schema": {
              "$ref": "#/definitions/TransactionList"
            }
          },
          "400": {
            "description": "Whoops! Something went wrong with your request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "Whoops! You requested something that doesn't exist",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/callbacks": {
      "post": {
        "tags": [
          "Callbacks"
        ],
        "summary": "Create a callback.",
        "description": "You can register several callbacks for your server application. We send them important information about the credentials of your customers, and primarily we notify you about the status of the connections we make to the banks. It is not required, but it is strongly recommended that you provide callbacks in order to keep your application synced  with our API in real time.",
        "parameters": [
          {
            "in": "body",
            "name": "Callback",
            "description": "Required parameters to create a callback",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateCallbackBody"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Everything was OK. You successfully registered a callback",
            "schema": {
              "$ref": "#/definitions/Callback"
            }
          },
          "400": {
            "description": "Whoops! Something went wrong with your request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Callbacks"
        ],
        "summary": "Get a list of callbacks.",
        "description": "You can obtain a list of the customers you have registered.",
        "responses": {
          "200": {
            "description": "Everything was OK. You successfully obtained a list of callbacks.",
            "schema": {
              "$ref": "#/definitions/CallbackList"
            }
          }
        }
      }
    },
    "/callbacks/{id}": {
      "get": {
        "tags": [
          "Callbacks"
        ],
        "summary": "Get a callback.",
        "description": "You can fetch the information of an individual callback.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "The ID of the callback"
          }
        ],
        "responses": {
          "200": {
            "description": "Everything was OK. You could get a callback successfully.",
            "schema": {
              "$ref": "#/definitions/Callback"
            }
          },
          "400": {
            "description": "Whoops! Something went wrong with your request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "Whoops! You requested something that doesn't exist",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Callbacks"
        ],
        "summary": "Updates a callback.",
        "description": "You can update the information of an individual callback.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "The ID of the callback"
          },
          {
            "in": "body",
            "name": "Callback",
            "description": "Required parameters for update a callback",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateCallbackBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Everything was OK. You updated a callback successfully.",
            "schema": {
              "$ref": "#/definitions/Callback"
            }
          },
          "400": {
            "description": "Whoops! Something went wrong with your request",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          },
          "404": {
            "description": "Whoops! You requested something that doesn't exist",
            "schema": {
              "$ref": "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/categories": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Get a list of categories.",
        "description": "Get all the categories with which Finerio can classify transactions.",
        "responses": {
          "200": {
            "description": "Everything was OK. You successfully obtained the list of categories.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Category"
              }
            }
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "OAuth2": {
      "type": "oauth2",
      "flow": "password",
      "tokenUrl": "https://api-v2.finerio.mx/oauth/token",
      "scopes": {
        "read": "Read",
        "write": "Write"
      }
    }
  },
  "definitions": {
    "Errors": {
      "properties": {
        "errors": {
          "type": "array",
          "description": "A List of errors",
          "items": {
            "$ref": "#/definitions/Error"
          }
        }
      }
    },
    "Error": {
      "properties": {
        "code": {
          "type": "string",
          "description": "The code of the error. You can use this code for i18n messages inside your application",
          "example": "error.code"
        },
        "title": {
          "type": "string",
          "description": "A brief explanation of the error",
          "example": "Error title"
        },
        "detail": {
          "type": "string",
          "description": "A detailed explanation of the error. If this message is not self explanatory, please let us know",
          "example": "Error detail"
        }
      }
    },
    "Bank": {
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "The unique ID of the bank",
          "example": 1
        },
        "name": {
          "type": "string",
          "description": "The commercial name of the bank",
          "example": "Banamex"
        },
        "status": {
          "type": "string",
          "enum": [
            "ACTIVE",
            "INACTIVE"
          ],
          "description": "The current status of the bank. If a bank has an INACTIVE status, it means we cannot fetch information from it for some external reason.",
          "example": "ACTIVE"
        }
      }
    },
    "Customer": {
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "The unique ID of the customer",
          "example": 1
        },
        "name": {
          "type": "string",
          "description": "The unique name of the customer you provided",
          "example": "Customer name"
        },
        "dateCreated": {
          "type": "integer",
          "description": "The date when the customer was created. It is represented as the number of milliseconds since 1970 (Epoch time)",
          "example": 1519838992000
        }
      }
    },
    "CreateCustomerBody": {
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of your customer. It can be an email, a number, a UUID or anything that you choose.",
          "example": "mycustomer@email.com"
        }
      },
      "required": [
        "name"
      ]
    },
    "CustomerList": {
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Customer"
          }
        },
        "nextCursor": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of the customer that can be used as the \"nextCursor\" parameter",
          "example": 1
        }
      }
    },
    "Credential": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "The unique ID of the credential",
          "example": "37b294e8-bde2-44b4-a8fd-a71cb284bc20"
        },
        "username": {
          "type": "string",
          "description": "The username related to this credential.",
          "example": "username"
        },
        "status": {
          "type": "string",
          "description": "The current status of the credential.\n- 'ACTIVE' signifies for a valid credential, which means that we can successfully fetch data from it.\n- 'PENDING' means we are processing the credential.\n- 'INVALID' is the sad part when we could not make you happy with the information you requested. We're sorry.",
          "enum": [
            "ACTIVE",
            "PENDING",
            "INVALID"
          ],
          "example": "ACTIVE"
        },
        "dateCreated": {
          "type": "integer",
          "format": "int64",
          "description": "The date when the credential was created. It is represented as the number of milliseconds since 1970 (Epoch time).",
          "example": 1519838992000
        }
      }
    },
    "CreateCredentialBody": {
      "properties": {
        "customerId": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of the customer related to this credential.",
          "example": 1
        },
        "bankId": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of the bank related to this credential.",
          "example": 1
        },
        "username": {
          "type": "string",
          "format": "byte",
          "description": "The username associated with this credential. It must be encrypted with the Finerio Banks API Public Key and must be encoded using Base 64.",
          "example": "dXNlcm5hbWVldWJ0ZnZ1dHlmYnZpbnl1aGd2dXRyZHliZnRpZzd1dHlkeHllcnRma2dibmhqY2ZieGRyeXN2dGRydWJmaWdub3VsaWhtbm91Z25mOG50eWlmdG5ndml1a2hqbWJuamdmYmR1eWdudmtoZ3ZudXloZm5jdnlpZ2t1aGI="
        },
        "password": {
          "type": "string",
          "format": "byte",
          "description": "The password associated with this credential. It must be encrypted with the Finerio Banks API Public Key and must be encoded using Base 64..",
          "example": "dXNlcm5hbWVldWJ0ZnZ1dHlmYnZpbnl1aGd2dXRyZHliZnRpZzd1dHlkeHllcnRma2dibmhqY2ZieGRyeXN2dGRydWJmaWdub3VsaWhtbm91Z25mOG50eWlmdG5ndml1a2hqbWJuamdmYmR1eWdudmtoZ3ZudXloZm5jdnlpZ2t1aGI="
        },
        "securityCode": {
          "type": "string",
          "format": "byte",
          "description": "The security code associated with this credential. It must be encrypted with the Finerio Banks API Public Key and must be encoded using Base 64. Only for HSBC credentials.",
          "example": "dXNlcm5hbWVldWJ0ZnZ1dHlmYnZpbnl1aGd2dXRyZHliZnRpZzd1dHlkeHllcnRma2dibmhqY2ZieGRyeXN2dGRydWJmaWdub3VsaWhtbm91Z25mOG50eWlmdG5ndml1a2hqbWJuamdmYmR1eWdudmtoZ3ZudXloZm5jdnlpZ2t1aGI="
        }
      },
      "required": [
        "username",
        "password",
        "bankId",
        "customerId"
      ]
    },
    "CredentialList": {
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Credential"
          }
        },
        "nextCursor": {
          "type": "string",
          "format": "uuid",
          "description": "The ID of the credential that can be used as the \"nextCursor\" parameter",
          "example": "37b294e8-bde2-44b4-a8fd-a71cb284bc20"
        }
      }
    },
    "UpdateCredentialBody": {
      "properties": {
        "password": {
          "type": "string",
          "format": "byte",
          "description": "The password associated with this credential. It must be encryted with the Finerio Banks API Public Key and must be encoded using Base 64..",
          "example": "dXNlcm5hbWVldWJ0ZnZ1dHlmYnZpbnl1aGd2dXRyZHliZnRpZzd1dHlkeHllcnRma2dibmhqY2ZieGRyeXN2dGRydWJmaWdub3VsaWhtbm91Z25mOG50eWlmdG5ndml1a2hqbWJuamdmYmR1eWdudmtoZ3ZudXloZm5jdnlpZ2t1aGI="
        },
        "securityCode": {
          "type": "string",
          "format": "byte",
          "description": "The security code associated with this credential. It must be encryted with the Finerio Banks API Public Key and must be encoded using Base 64. Only for HSBC credentials.",
          "example": "dXNlcm5hbWVldWJ0ZnZ1dHlmYnZpbnl1aGd2dXRyZHliZnRpZzd1dHlkeHllcnRma2dibmhqY2ZieGRyeXN2dGRydWJmaWdub3VsaWhtbm91Z25mOG50eWlmdG5ndml1a2hqbWJuamdmYmR1eWdudmtoZ3ZudXloZm5jdnlpZ2t1aGI="
        }
      },
      "required": [
        "password"
      ]
    },
    "Account": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "The ID of the account",
          "example": "37b294e8-bde2-44b4-a8fd-a71cb284bc20"
        },
        "name": {
          "type": "string",
          "description": "The name of the account",
          "example": "CLASICA - MXN-078"
        },
        "number": {
          "type": "string",
          "description": "The number of the account",
          "example": "61***4540"
        },
        "balance": {
          "type": "number",
          "description": "The balance of the account",
          "example": 123.45
        },
        "type": {
          "type": "string",
          "description": "The type of the account.",
          "example": "Crédito",
          "enum": [
            "Crédito",
            "Débito",
            "Inversión",
            "Cheques"
          ]
        },
        "dateCreated": {
          "type": "integer",
          "format": "int64",
          "description": "The date that the account was performed. It is represented as the number of milliseconds since 1970 (Epoch time).",
          "example": 1519838992000
        }
      }
    },
    "AccountList": {
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Account"
          }
        },
        "nextCursor": {
          "type": "string",
          "format": "uuid",
          "description": "The ID of the account that can be used as the \"nextCursor\" parameter",
          "example": "37b294e8-bde2-44b4-a8fd-a71cb284bc20"
        }
      }
    },
    "Transaction": {
      "properties": {
        "id": {
          "type": "integer",
          "format": "base64",
          "description": "The ID of the transaction",
          "example": 1
        },
        "description": {
          "type": "string",
          "description": "A detailed description of the transaction",
          "example": "CARGO PAGO TARJETA CREDITO"
        },
        "amount": {
          "type": "number",
          "description": "The amount of the transaction",
          "example": 123.45
        },
        "isCharge": {
          "type": "boolean",
          "description": "Indicates if the transaction is a charge"
        },
        "date": {
          "type": "integer",
          "format": "int64",
          "description": "The date that the transaction was performed. It is represented as the number of milliseconds since 1970 (Epoch time).",
          "example": 1519838992000
        },
        "categoryId": {
          "type": "string",
          "format": "uuid",
          "description": "The category ID of this transaction, if available",
          "example": "37b294e8-bde2-44b4-a8fd-a71cb284bc20"
        }
      }
    },
    "TransactionList": {
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Transaction"
          }
        },
        "nextCursor": {
          "type": "integer",
          "format": "base64",
          "description": "The ID of the transaction that can be used as the \"nextCursor\" parameter",
          "example": 1
        }
      }
    },
    "Callback": {
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of the callback",
          "example": 1
        },
        "url": {
          "type": "string",
          "description": "The url of the callback",
          "example": "https://example.com/callback"
        },
        "nature": {
          "type": "string",
          "description": "The nature of the callback",
          "enum": [
            "NOTIFY",
            "SUCCESS",
            "FAILURE",
            "ACCOUNTS",
            "TRANSACTIONS"
          ]
        },
        "dateCreated": {
          "type": "integer",
          "format": "int64",
          "description": "The date when the callback was created. It is represented as the number of milliseconds since 1970 (Epoch time).",
          "example": 1519838992000
        },
        "lastUpdated": {
          "type": "integer",
          "format": "int64",
          "description": "The date that the callback was updated. It is represented as the number of milliseconds since 1970 (Epoch time).",
          "example": 1519838992000
        }
      }
    },
    "CreateCallbackBody": {
      "properties": {
        "url": {
          "type": "string",
          "description": "The url of the callback",
          "example": "https://example.com/callback"
        },
        "nature": {
          "type": "string",
          "description": "The nature of the callback",
          "enum": [
            "NOTIFY",
            "SUCCESS",
            "FAILURE",
            "ACCOUNTS",
            "TRANSACTIONS"
          ],
          "example": "NOTIFY"
        }
      },
      "required": [
        "url",
        "nature"
      ]
    },
    "CallbackList": {
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Callback"
          }
        },
        "nextCursor": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of the callback that can be used as the \"nextCursor\" parameter",
          "example": 1
        }
      }
    },
    "UpdateCallbackBody": {
      "properties": {
        "url": {
          "type": "string",
          "description": "The url of the callback",
          "example": "https://example.com/callback"
        }
      },
      "required": [
        "url"
      ]
    },
    "Category": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "The unique ID of the category",
          "example": 1
        },
        "name": {
          "type": "string",
          "description": "The name of the category",
          "example": "Alimentos"
        },
        "parentId": {
          "type": "string",
          "format": "uuid",
          "description": "The parent of this category.",
          "example": "37b294e8-bde2-44b4-a8fd-a71cb284bc20"
        }
      }
    }
  }
}
